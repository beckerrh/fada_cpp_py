#----------------------------------------------------------
#
cmake_minimum_required(VERSION 3.15)
PROJECT(fada)
#
#----------------------------------------------------------
#
SET(CMAKE_CXX_STANDARD 17)
if (CMAKE_BUILD_TYPE STREQUAL "Debug")
  # add_definitions(-DARMA_EXTRA_DEBUG)
	add_definitions(-DDEBUG)
elseif (CMAKE_BUILD_TYPE STREQUAL "Release")
  # SET(CMAKE_C_FLAGS "-O3")
  SET(CMAKE_CXX_FLAGS "-Ofast")
  add_definitions(-DARMA_NO_DEBUG)
endif()
add_link_options(-fopenmp)

if (CMAKE_CXX_COMPILER_ID STREQUAL "Clang" OR CMAKE_CXX_COMPILER_ID STREQUAL "AppleClang")
	add_definitions(-DCLANG)
elseif (CMAKE_CXX_COMPILER_ID STREQUAL "GNU")
	add_definitions(-DGNU)
endif()
MESSAGE("CMAKE_CXX_COMPILER_ID = ${CMAKE_CXX_COMPILER_ID}")
MESSAGE("CMAKE_CXX_FLAGS = ${CMAKE_CXX_FLAGS}")



ADD_DEFINITIONS(-DARMA_USE_HDF5)

#----------------------------------------------------------
SET(PACKAGES
  HDF5
  Armadillo
  # superlu
  amgcl
  # Eigen3
)
SET(LINK_LIBRARIES "")
SET(INCLUDE_DIRECTORIES "")
FOREACH(PACKAGE ${PACKAGES})
  FIND_PACKAGE(${PACKAGE} REQUIRED)
  string(TOUPPER ${PACKAGE} PACKAGE_UPPER)
  list(APPEND LINK_LIBRARIES ${${PACKAGE_UPPER}_LIBRARIES})
  list(APPEND INCLUDE_DIRECTORIES ${${PACKAGE_UPPER}_INCLUDE_DIRS})
ENDFOREACH(PACKAGE)
#----------------------------------------------------------
# packages without "FindXXX.cmake"
SET(PACKAGES
  umfpack
)
FOREACH(PACKAGE ${PACKAGES})
  string(TOUPPER ${PACKAGE} PACKAGE_UPPER)
  FIND_LIBRARY(UMFPACK_LIBRARIES NAMES ${PACKAGE} lib${PACKAGE} ${PACKAGE_UPPER}
                 PATH_SUFFIXES ${CMAKE_LIBRARY_ARCHITECTURE}
                 HINTS ${CMAKE_INSTALL_PREFIX}/External/lib)
  if(NOT ${PACKAGE_UPPER}_LIBRARIES)
      message(FATAL_ERROR "*** ${PACKAGE} library not find (consider installing suite-sparse)")
  endif()
  list(APPEND LINK_LIBRARIES ${${PACKAGE_UPPER}_LIBRARIES})
ENDFOREACH(PACKAGE)

# MESSAGE("{LINK_LIBRARIES} ${LINK_LIBRARIES}")
# MESSAGE("{INCLUDE_DIRECTORIES} ${INCLUDE_DIRECTORIES}")
#
#----------------------------------------------------------
# AUX_SOURCE_DIRECTORY(Fada SRC)
SET(DIRECTORIES
    Fada
    # Fada/Q1
    # Fada/Stokes
)
FOREACH(DIRECTORY ${DIRECTORIES})
  AUX_SOURCE_DIRECTORY(${DIRECTORY} SRC)
  INCLUDE_DIRECTORIES(${DIRECTORY})
ENDFOREACH(DIRECTORY)
SET(FADALIB fadalib${CMAKE_BUILD_TYPE})
ADD_LIBRARY(${FADALIB} ${SRC})
TARGET_INCLUDE_DIRECTORIES(${FADALIB} PRIVATE ${INCLUDE_DIRECTORIES})
#
FILE(GLOB EXECUTABLESCPP ${CMAKE_CURRENT_SOURCE_DIR}/bin/*.cpp)
SET(EXECUTABLES)
FOREACH(EXECUTABLE ${EXECUTABLESCPP})
    get_filename_component(EXECUTABLE ${EXECUTABLE} NAME)
    string(REPLACE ".cpp" "" EXECUTABLE ${EXECUTABLE})
    LIST(APPEND EXECUTABLES ${EXECUTABLE})
ENDFOREACH(EXECUTABLE)
FOREACH(EXECUTABLE ${EXECUTABLES})
    ADD_EXECUTABLE(${EXECUTABLE} bin/${EXECUTABLE}.cpp)
    TARGET_INCLUDE_DIRECTORIES(${EXECUTABLE} PUBLIC ${INCLUDE_DIRECTORIES})
    TARGET_LINK_LIBRARIES(${EXECUTABLE} ${FADALIB}  ${LINK_LIBRARIES})
ENDFOREACH(EXECUTABLE)
#
#----------------------------------------------------------
AUX_SOURCE_DIRECTORY(pybind SRCPY)
FIND_PACKAGE(carma CONFIG REQUIRED)
# pybind11_add_module(pyfada  MODULE ${SRCPY} ${SRC})
pybind11_add_module(pyfada  MODULE ${SRCPY})
INCLUDE_DIRECTORIES(${fada_SOURCE_DIR})
TARGET_LINK_LIBRARIES(
    pyfada PUBLIC
    ${LINK_LIBRARIES}
    carma::carma
    fadalib${CMAKE_BUILD_TYPE}
)
#----------------------------------------------------------
#-- copy .py files
#
# FILE(GLOB PYBINFILES ${CMAKE_CURRENT_SOURCE_DIR}/*.py)
# LIST(REMOVE_ITEM PYBINFILES ${CMAKE_CURRENT_SOURCE_DIR}/install.py)
# FILE(GLOB PYBINFILES ${CMAKE_CURRENT_SOURCE_DIR}/fada.py)
# FOREACH(PYBINFILE ${PYBINFILES})
#   get_filename_component(FILE ${PYBINFILE} NAME)
#   configure_file(${PYBINFILE} ${CMAKE_INSTALL_PREFIX}/${FILE} COPYONLY)
# ENDFOREACH(PYBINFILE)

#----------------------------------------------------------
INSTALL(TARGETS ${FADALIB} DESTINATION lib)
INSTALL(TARGETS pyfada DESTINATION ${CMAKE_INSTALL_PREFIX})

FOREACH(EXECUTABLE ${EXECUTABLES})
    INSTALL(TARGETS ${EXECUTABLE} DESTINATION ${CMAKE_INSTALL_PREFIX})
ENDFOREACH(EXECUTABLE)
